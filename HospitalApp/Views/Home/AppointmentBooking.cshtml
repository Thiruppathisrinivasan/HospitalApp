@model HospitalApp.Models.AppointmentModel

@{
    ViewBag.Title = "AppointmentBooking";
}
<style>
    textarea {
        resize: none;
        width: 500px;
    }
</style>
<div class="container  mt-3">
    <h2 class="text-center mb-3">AppointmentBooking</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="row">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="col-md-2">
                <label class="form-label">Select Specialist Type</label>

                <div class="">
                    @Html.DropDownListFor(model => model.Category, new SelectList(ViewBag.DoctorCategory, "Name", "Name"), "Select the Doctor specialization",
                      new { @class = "form-control", id = "doctorCategoryDropdown" })
                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-2">
                <label class="form-label">select Doctor</label>

                <div class="">
                    @Html.DropDownListFor(model => model.Doctor, new SelectList(new List<SelectListItem>(), "ID", "Name"), "Select Doctor", new { @class = "form-control  dropdown-toggle", id = "doctorDropdown", disabled = "disabled" })

                    @Html.ValidationMessageFor(model => model.Doctor, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-2">
                <label class="form-label">Appointment Date</label>

                <div class="">
                    @Html.TextBoxFor(model => model.date, new { @class = "form-control", type = "Date" })
                    @Html.ValidationMessageFor(model => model.date, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-2">
                <label class="form-label">Select Time Slot </label>
                <div class="">
                    @Html.DropDownListFor(model => model.Time, new SelectList(new List<SelectListItem>(), "ID", "Name"), "Select the Time", new { @class = "form-control", id = "TimeDropdown", disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="col-md-10 d-flex align-items-center mt-3">
                <label class="form-label p-2 d-flex flex-column"><span>Description About Appointment</span><span class="bg-primary-subtle p-2">eg:fever,cold etc....</span><span class="bg-primary-subtle p-2">mention for how manydays etc..</span></label>

                <div class="p-2">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="submit" class="btn btn-primary mt-2" />
                    @Html.ActionLink("Back", "Dashboard", "Home", null, new { @class = "btn btn-secondary  ms-3 mt-2" })
                </div>
            </div>
        </div>
    }

</div>


@*@Html.Partial("getAppointmentDetailsForPatient")*@

<div id="griddata" class="mt-3"></div>
<div id="griddata1"class="mt-3"></div>


@{
    if (TempData["sumsg"] != null)
    {
        <script>
            alert("Appointment Confirmed");
        </script>
    }
    else
    {

        <script>
            alert("only two appointments per day");
        </script>
    }
}








<script src="~/Scripts/jquery-2.0.0.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/Scripts/axios.min.js"></script>
<script>
    $(document).ready(function () {
        let currentDate = new Date();
        let year = currentDate.getFullYear();
        let month = currentDate.getMonth() + 1;
        let day = currentDate.getDate();
        month = month < 10 ? "0" + month : month;
        day = day < 10 ? "0" + day : day;

        let formattedCurrentDate = `${year}-${month}-${day}`;


        $("#date").attr('min', formattedCurrentDate);


        let nextWeekDate = new Date(currentDate);
        nextWeekDate.setDate(nextWeekDate.getDate() + 7);
        let nextWeekYear = nextWeekDate.getFullYear();
        let nextWeekMonth = nextWeekDate.getMonth() + 1;
        let nextWeekDay = nextWeekDate.getDate();
        nextWeekMonth = nextWeekMonth < 10 ? "0" + nextWeekMonth : nextWeekMonth;
        nextWeekDay = nextWeekDay < 10 ? "0" + nextWeekDay : nextWeekDay;
        let formattedNextWeekDate = `${nextWeekYear}-${nextWeekMonth}-${nextWeekDay}`;
        $("#date").attr('max', formattedNextWeekDate);
        $("#doctorCategoryDropdown").val("");
        $("#date").val("");

        //$.ajax({
        //    url: "/Home/getAppointmentDetailsForPatient",
        //    type: "GET",
        //    success: function (data) {
        //        $("#griddata").append(data);
        //    },
        //    error: function () {

        //        console.log("Error fetching appointment list.");
        //    }
        //});

        axios.get('/Home/getAppointmentDetailsForPatient')
            .then(function (response) {
                $("#griddata1").append(response.data);
            })
            .catch(function (error) {
                console.log("Error fetching appointment list:", error);
            });
        


        


    });



    $("#doctorCategoryDropdown").change(function () {
        var categoryId = $(this).val();
        $("#doctorDropdown").empty().prop('disabled', true);

        $.ajax({
            url: "/Home/GetDoctorsByCategory",
            type: "GET",
            data: { categoryId: categoryId },
            success: function (data) {



                $.each(data, function (index, item) {
                    $("#doctorDropdown").append('<option value="' + item.ID + '">' + item.Name + '</option>');
                });

                $("#doctorDropdown").prop('disabled', false);
            },
            error: function () {
                console.log("Error fetching doctors.");
            }
        });
    });

    $("#date").change(function () {

        $("#TimeDropdown").empty().prop('disabled', true);

        var doctorId = $('#doctorDropdown').val();
        var date = $(this).val();
        $.ajax({
            url: "/Home/GetSlotTimes",
            type: "GET",
            data: { doctorId: doctorId, date: date },
            success: function (data) {
                if (data.length > 0) {
                    $.each(data, function (index, item) {
                        $("#TimeDropdown").append($('<option>', {
                            value: item.ID,
                            text: item.Name
                        }));
                    });

                    $("#TimeDropdown").prop('disabled', false);
                } else {
                    alert("No slots available for the selected date. please select Different Date");
                    $("#date").val("");
                }
            },
            error: function () {
                console.log("Error fetching slot times.");
                alert("select all required fields");
            }
        });

    });

    $("#doctorDropdown").change(function () {

        $("#TimeDropdown").empty().prop('disabled', true);

        var doctorId = $(this).val();
        var date = $("#date").val();
        $.ajax({
            url: "/Home/GetSlotTimes",
            type: "GET",
            data: { doctorId: doctorId, date: date },
            success: function (data) {


                $.each(data, function (index, item) {
                    $("#TimeDropdown").append($('<option>', {
                        value: item.ID,
                        text: item.Name
                    }));
                });

                $("#TimeDropdown").prop('disabled', false);

            },
            error: function () {
                console.log("Error fetching slot times.");
                alert("select all required fields");
            }
        });
        console.log($("#TimeDropdown").children('option').length > 0);
        if ($("#TimeDropdown").children('option').length < 0) {
            alert("no slots available for the selected date");
            $("#date").val("");
        }
    });
</script>
